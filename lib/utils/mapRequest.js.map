{"version":3,"sources":["../../src/utils/mapRequest.js"],"names":["makeRequest","options","params","defaultOptions","defaults","fetchOptions","url","then","andThen","value","delay","successText","otherOptions","Promise","resolve","reject","request","Function","prototype","isPrototypeOf","result","thenOptions","mapRequestByOptions","data","status","loading","error","success","code","message","toString","setTimeout","method","Array","isArray","all","map","item"],"mappings":"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","sourcesContent":["import { compose } from './middleware.js';\nimport { defaults, buildFetch } from './helper.js';\nimport isPlainObject from './isPlainObject.js';\n\nfunction makeRequest(options = {}) {\n  return function (params = {}) {\n    const defaultOptions = defaults.fetchOptions || {};\n    let {\n      url, then, andThen,\n      value = defaultOptions.value, delay = defaultOptions.delay, successText = defaultOptions.successText,\n      ...otherOptions\n    } = options;\n    // support modify params\n    if (otherOptions.params) {\n      otherOptions.params = {\n        ...otherOptions.params,\n        ...params\n      };\n    } else {\n      otherOptions.params = params;\n    }\n    return new Promise((resolve, reject) => {\n      compose('before')([options], () => {\n        let request;\n        if (value && !Function.prototype.isPrototypeOf(value)) {\n          request = Promise.resolve(value);\n        } else if (url) {\n          request = buildFetch(url, otherOptions);\n        } else {\n          request = Promise.reject('Must have url or value !');\n        }\n        request.then((result) => {\n          if (then) {\n            let thenOptions = then(result);\n            if (thenOptions) {\n              return mapRequestByOptions(thenOptions)();\n            }\n          }\n          let data = result;\n          if (Function.prototype.isPrototypeOf(value)) {\n            data = value(data);\n          }\n          return {\n            status: 'success',\n            loading: false,\n            error: false,\n            success: true,\n            code: 200,\n            message: successText || 'Success',\n            value: data\n          };\n        }).catch((error) => {\n          return {\n            status: 'error',\n            loading: false,\n            error: true,\n            success: false,\n            code: error.code || 0,\n            message: typeof error === 'string' ? error : (error.message || error.toString())\n          };\n        }).then((data) => {\n          compose('after')([options, data], () => {\n            setTimeout(() => {\n              if (data.success) {\n                resolve(data);\n              } else {\n                reject(data);\n              }\n            }, delay);\n          });\n        });\n      });\n    });\n  };\n}\n\nfunction mapRequestByOptions(options, defaults = {}) {\n  if (typeof options === 'string') {\n    return makeRequest({\n      ...defaults,\n      url: options,\n      method: 'GET'\n    });\n  } else if (isPlainObject(options)) {\n    return makeRequest({\n      ...defaults,\n      ...options\n    });\n  } else if (Array.isArray(options)) {\n    return () => Promise.all(options.map(item => makeRequest({\n      ...defaults,\n      ...item\n    })()));\n  } else {\n    return () => Promise.reject('Not Support the Request Type');\n  }\n}\n\nexport {\n  mapRequestByOptions\n};\n"],"file":"mapRequest.js"}