{"version":3,"sources":["../../src/hooks/useFetch.js"],"names":["useFetch","options","deps","isForceUpdate","refreshInterval","otherOptions","request","forceUpdate","state","callback","newCallback","loading","Promise","resolve","then","data","useEffect","Number","isInteger","timer","setInterval","clearInterval"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEe,SAASA,QAAT,CAAkBC,OAAlB,EAA4D;AAAA,MAAjCC,IAAiC,uEAA1B,EAA0B;AAAA,MAAtBC,aAAsB,uEAAN,IAAM;;AAAA,MACnEC,eADmE,GAC9BH,OAD8B,CACnEG,eADmE;AAAA,MAC/CC,YAD+C,4BAC9BJ,OAD8B;;AAEzE,MAAIK,OAAO,GAAG,qCAAoBD,YAApB,CAAd;AACA,MAAME,WAAW,GAAG,iCAApB;;AAHyE,oBAIjD,6BAAWD,OAAX,EAAoBJ,IAApB,CAJiD;AAAA;AAAA,MAIpEM,KAJoE;AAAA,MAI7DC,QAJ6D;;AAKzE,MAAIC,WAAW,GAAG,wBAAY,YAAM;AAClC,QAAIF,KAAK,CAACG,OAAV,EAAmB;AACjB,aAAOC,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;AACD;;AACDV,IAAAA,aAAa,IAAII,WAAW,EAA5B;AACA,WAAOE,QAAQ,GAAGK,IAAX,CAAgB,UAACC,IAAD,EAAU;AAC/BZ,MAAAA,aAAa,IAAII,WAAW,EAA5B;AACA,aAAOQ,IAAP;AACD,KAHM,CAAP;AAID,GATiB,EASf,CAACN,QAAD,CATe,CAAlB;AAUAO,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIZ,eAAe,IAAIa,MAAM,CAACC,SAAP,CAAiBd,eAAjB,CAAvB,EAA0D;AACxD,UAAIe,KAAK,GAAGC,WAAW,CAAC,YAAM;AAC5BV,QAAAA,WAAW;AACZ,OAFsB,EAEpBN,eAFoB,CAAvB;AAGA,aAAO;AAAA,eAAMiB,aAAa,CAACF,KAAD,CAAnB;AAAA,OAAP;AACD;AACF,GAPQ,EAON,CAACV,QAAD,CAPM,CAAT;AAQA,SAAO,CAACD,KAAD,EAAQE,WAAR,CAAP;AACD","sourcesContent":["import { useCallback } from 'react';\nimport { mapRequestByOptions } from \"../utils/mapRequest\";\nimport useRequest from \"./useRequest\";\nimport useForceUpdate from \"./useForceUpdate\";\n\nexport default function useFetch(options, deps = [], isForceUpdate = true) {\n  let { refreshInterval, ...otherOptions } = options;\n  let request = mapRequestByOptions(otherOptions);\n  const forceUpdate = useForceUpdate();\n  let [state, callback] = useRequest(request, deps);\n  let newCallback = useCallback(() => {\n    if (state.loading) {\n      return Promise.resolve(false);\n    }\n    isForceUpdate && forceUpdate();\n    return callback().then((data) => {\n      isForceUpdate && forceUpdate();\n      return data;\n    });\n  }, [callback]);\n  useEffect(() => {\n    if (refreshInterval && Number.isInteger(refreshInterval)) {\n      let timer = setInterval(() => {\n        newCallback();\n      }, refreshInterval);\n      return () => clearInterval(timer);\n    }\n  }, [callback]);\n  return [state, newCallback];\n}\n"],"file":"useFetch.js"}